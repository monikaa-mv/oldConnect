{"version":3,"sources":["../src/components/IssueKey.jsx","../src/components/IssueSummary.jsx","../src/components/IssueCard.jsx","hello-world.jsx"],"names":["IssueKey","issueKey","IssueSummary","summary","IssueCard","issues","setIssues","useState","useEffect","fetchIssues","response","fetch","ok","data","json","console","error","map","issue","index","key","fields","ReactDOM","render","document","getElementById"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAA0B;AAEnB,MAAMA,QAAQ,GAAG,CAAC;EAACC;AAAQ,CAAC,KAAK;EACpC,oBACK,2CAAOA,QAAQ,CAAQ;AAEhC,CAAC;AAAC;;;;;;;;ACNF;AAA0B;AAEnB,MAAMC,YAAY,GAAG,CAAC;EAACC;AAAO,CAAC,KAAI;EACtC,wDAAOA,OAAO,CAAQ;AAC1B,CAAC;AAAA;;;;;;;;ACJD;AACA;AACA;AACA;AAA0C;AAAA;AAAA;AAEnC,MAAMC,SAAS,GAAG,MAAK;EAC1B,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAG,IAAAC,eAAQ,EAAC,EAAE,CAAC;EAE1C,IAAAC,gBAAS,EAAC,MAAM;IACd;IACAC,WAAW,EAAE;EACf,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMA,WAAW,GAAG,YAAY;IAC9B,IAAI;MACF;MACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,wFAAwF,CAAC;MAEtH,IAAID,QAAQ,CAACE,EAAE,EAAE;QACf,MAAMC,IAAI,GAAG,MAAMH,QAAQ,CAACI,IAAI,EAAE;QAClCR,SAAS,CAACO,IAAI,CAACR,MAAM,CAAC;MACxB,CAAC,MAAM;QACLU,OAAO,CAACC,KAAK,CAAC,wBAAwB,CAAC;MACzC;IACF,CAAC,CAAC,OAAOA,KAAK,EAAE;MACdD,OAAO,CAACC,KAAK,CAAC,sCAAsC,EAAEA,KAAK,CAAC;IAC9D;EACF,CAAC;EAED,oBACE,6BAAC,cAAK,QACHX,MAAM,CAACY,GAAG,CAAC,CAACC,KAAK,EAAEC,KAAK,kBACvB;IAAI,GAAG,EAAED,KAAK,CAACE;EAAI,gBACjB,yCAAKD,KAAK,GAAG,CAAC,CAAM,eACpB,sDACE,6BAAC,iBAAQ;IAAC,QAAQ,EAAED,KAAK,CAACE;EAAI,EAAG,oBACjC,6BAAC,qBAAY;IAAC,OAAO,EAAEF,KAAK,CAACG,MAAM,CAAClB;EAAQ,EAAG,CAC5C,CAGR,CAAC,CACI;AAEZ,CAAC;AAAC;;;;AC3CF;AACA;AACA;AAAwD;AAExD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;;AAEAmB,iBAAQ,CAACC,MAAM,eAAC,6BAAC,oBAAS,OAAG,EAAEC,QAAQ,CAACC,cAAc,CAAC,MAAM,CAAC,CAAC","file":"hello-world.js","sourceRoot":"..","sourcesContent":["import React from \"react\";\n\nexport const IssueKey = ({issueKey}) => {\n    return (\n         <span>{issueKey}</span>\n    );\n};","import React from \"react\";\n\nexport const IssueSummary = ({summary}) =>{\n    <span>{summary}</span>\n}","import React, { useEffect, useState } from 'react';\nimport Table from './Table';\nimport IssueKey from './IssueKey';\nimport IssueSummary from './IssueSummary';\n\nexport const IssueCard = () =>{\n    const [issues, setIssues] = useState([]);\n\n  useEffect(() => {\n    // Fetch issues using REST API and JQL query\n    fetchIssues();\n  }, []);\n\n  const fetchIssues = async () => {\n    try {\n      // Make a REST API request with the JQL query to fetch high priority issues\n      const response = await fetch('https://monikavalecha.atlassian.net/rest/api/3/search?jql=project=P2 AND priority=High');\n\n      if (response.ok) {\n        const data = await response.json();\n        setIssues(data.issues);\n      } else {\n        console.error('Failed to fetch issues');\n      }\n    } catch (error) {\n      console.error('Error occurred while fetching issues', error);\n    }\n  };\n\n  return (\n    <Table>\n      {issues.map((issue, index) => (\n        <tr key={issue.key}>\n          <td>{index + 1}</td>\n          <td>\n            <IssueKey issueKey={issue.key} />: \n            <IssueSummary summary={issue.fields.summary} />\n          </td>\n          {/* ... Add other relation columns here */}\n        </tr>\n      ))}\n    </Table>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom'\nimport { IssueCard } from '../src/components/IssueCard';\n\n// export default function HelloWorld() {\n//   const [excitementLevel, setExcitementLevel] = React.useState(0);\n//   return <SectionMessage\n//       title={`Hello, world${excitementLevel ? new Array(excitementLevel).fill('!').join('') : '.'}`}\n//       actions={[\n//         {\n//           key: '1',\n//           href: 'https://atlassian.design/components/',\n//           text: 'Browse more components to add to your app',\n//         },\n//         {\n//           key: '2',\n//           onClick: () => setExcitementLevel(excitementLevel + 1),\n//           text: 'Get excited!',\n//         }\n//       ]}\n//     >\n//       <p>\n//         Congratulations! You have successfully created an Atlassian Connect app using the <a href={'https://bitbucket.org/atlassian/atlassian-connect-express'}>atlassian-connect-express</a> client library.\n//       </p>\n//     </SectionMessage>;\n// }\n\n// export default function HelloWorld(){\n//   return (\n//     <div>\n//       <h1>High Priorities Issue</h1>\n//       <h2>Table:</h2>\n//     </div>\n    \n//   )\n  \n  \n// }\n\nReactDOM.render(<IssueCard />, document.getElementById('root'));\n"]}